as.factor(completeData$Approved)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
prediction <- replace_na(prediction,1)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
library(mice)
miceModCA <- mice(crx,m=5,method="pmm",maxit=50,seed=1245)
summary(miceModCA)
# miceModCA$imp$Age
completeData <- complete(miceModCA,2)
summary(completeData)
as.factor(completeData$Approved)
completeData$Approved
as.factor(prediction>0.5)
as.factor(completeData$Approved)
as.factor(prediction>0.5)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
prediction <- replace_na(prediction,0)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
prediction <- replace_na(prediction,0)
confusionMatrix(data = as.factor(prediction>0.8),reference = as.factor(completeData$Approved))
confusionMatrix(data = as.factor(prediction>0.3),reference = as.factor(completeData$Approved))
prediction
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
prediction <- replace_na(prediction,0)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtLog + YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg)
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtLog + YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg)
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
# prediction <- replace_na(prediction,0)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtLog + YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg)
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
logreg2 <- glm(formula = completeData$Approved ~ YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg)
AgeLog <- log10(completeData$Age+0.01)
AgeLog <- log10(completeData$Age+0.01)
AgeNorm <- (AgeLog - mean(AgeLog, na.rm = TRUE)) / sd(AgeLog, na.rm = TRUE) # using log to normalize
YearsEmployedLog <- log10(completeData$YearsEmployed+0.01)
CreditScoreLog <- log10(completeData$CreditScore+0.01)
DebtLog <- log10(completeData$Debt+0.01)
IncomeLog <- log10(completeData$Income+0.01)
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtLog + YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg)
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
logreg2 <- glm(formula = completeData$Approved ~ YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg)
prediction2 <- predict(logreg2,completeData,type="response")
summary(prediction2)
confusionMatrix(data = as.factor(prediction2>0.5),reference = as.factor(completeData$Approved))
logreg2 <- glm(formula = completeData$Approved ~ YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg)
logreg2 <- glm(formula = completeData$Approved ~ YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg2)
prediction2 <- predict(logreg2,completeData,type="response")
summary(prediction2)
confusionMatrix(data = as.factor(prediction2>0.5),reference = as.factor(completeData$Approved))
Approved <- sum(completeData$Approved,na.rm=TRUE)
creditIncomePercentApproved = completeData %>%
mutate(IncomeCategory=cut(completeData$Income,100,labels=F)) %>%
group_by(completeData$Income,IncomeCategory,Approved) %>%
summarize(percentApproved=mean(Approved))
ggplot(creditIncomePercentApproved,aes(x=IncomeCategory,y=percentApproved))+geom_col()+ggtitle("Income - Approved Percentage")+
xlab("Income")+ylab("Approved Percentage")
sum(completeData$Approved)
completeData$Approved
sum(completeData$Approved,na.rm=TRUE)
length(completeData$Approved[completeData$Approved == TRUE])
Approved <- length(completeData$Approved[completeData$Approved == TRUE])
creditIncomePercentApproved = completeData %>%
mutate(IncomeCategory=cut(completeData$Income,100,labels=F)) %>%
group_by(completeData$Income,IncomeCategory,Approved) %>%
summarize(percentApproved=mean(Approved))
ggplot(creditIncomePercentApproved,aes(x=IncomeCategory,y=percentApproved))+geom_col()+ggtitle("Income - Approved Percentage")+
xlab("Income")+ylab("Approved Percentage")
as.factor(completeData$Approved)
as.factor(prediction2>0.5)
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtLog + YearsEmployedLog + CreditScoreLog + IncomeLog,
family = "binomial", data = completeData)
summary(logreg)
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
prediction
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
AgeLog <- log10(completeData$Age+0.01)
AgeNorm <- (AgeLog - mean(AgeLog, na.rm = TRUE)) / sd(AgeLog, na.rm = TRUE)
YearsEmployedLog <- log10(completeData$YearsEmployed+0.01)
YearsEmployedNorm <- (YearsEmployedLog - mean(YearsEmployedLog)) / sd(YearsEmployedLog)
CreditScoreLog <- log10(completeData$CreditScore+0.01)
CreditScoreNorm <- (CreditScoreLog - mean(CreditScoreLog)) / sd(CreditScoreLog)
DebtLog <- log10(completeData$Debt+0.01)
DebtNorm <- (DebtLog - mean(DebtLog)) / sd(DebtLog)
IncomeLog <- log10(completeData$Income+0.01)
IncomeNorm <- (IncomeLog - mean(IncomeLog)) / sd(IncomeLog)
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtNorm + YearsEmployedNorm + CreditScoreNorm + IncomeNorm,
family = "binomial", data = completeData)
summary(logreg)
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
confusionMatrix(data = as.factor(prediction>0.5),reference = as.factor(completeData$Approved))
logreg2 <- glm(formula = completeData$Approved ~ AgeNorm + YearsEmployedNorm + CreditScoreNorm + IncomeLog,
family = "binomial", data = completeData)
summary(logreg2)
logreg2 <- glm(formula = completeData$Approved ~ YearsEmployedNorm + CreditScoreNorm,
family = "binomial", data = completeData)
summary(logreg2)
prediction2 <- predict(logreg2,completeData,type="response")
summary(prediction2)
confusionMatrix(data = as.factor(prediction2>0.5),reference = as.factor(completeData$Approved))
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtNorm + YearsEmployedNorm + CreditScoreNorm + IncomeNorm,
family = "binomial", data = completeData)
summary(logreg)
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
confusionMatrix(data = as.factor(prediction<0.5),reference = as.factor(completeData$Approved))
logreg2 <- glm(formula = completeData$Approved ~ YearsEmployedNorm + CreditScoreNorm,
family = "binomial", data = completeData)
summary(logreg2)
prediction2 <- predict(logreg2,completeData,type="response")
summary(prediction2)
confusionMatrix(data = as.factor(prediction2>0.5),reference = as.factor(completeData$Approved))
logreg2 <- glm(formula = completeData$Approved ~ YearsEmployedNorm + CreditScoreNorm,
family = "binomial", data = completeData)
summary(logreg2)
prediction2 <- predict(logreg2,completeData,type="response")
summary(prediction2)
confusionMatrix(data = as.factor(prediction2<0.5),reference = as.factor(completeData$Approved))
logreg2 <- glm(formula = completeData$Approved ~ AgeNorm + YearsEmployedNorm + CreditScoreNorm,
family = "binomial", data = completeData)
summary(logreg2)
prediction2 <- predict(logreg2,completeData,type="response")
summary(prediction2)
confusionMatrix(data = as.factor(prediction2<0.5),reference = as.factor(completeData$Approved))
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
fir <- rpart(data = completeData,method='class')
rpart.plot(fit,extra=106)
library(rpart)
library(rpart.plot)
fir <- rpart(formula = completeData$Approved ~ AgeNorm + YearsEmployedNorm + CreditScoreNorm,
data = completeData,method='class')
rpart.plot(fit,extra=106)
library(rpart)
library(rpart.plot)
fit <- rpart(formula = completeData$Approved ~ AgeNorm + YearsEmployedNorm + CreditScoreNorm,
data = completeData,method='class')
rpart.plot(fit,extra=106)
library(caret)
confusionMatrix(data=as.factor(fit),reference=as.factor(completeData$Approved))
fit
library(rpart)
library(rpart.plot)
fit <- rpart(formula = completeData$Approved ~ AgeNorm + YearsEmployedNorm + CreditScoreNorm,
data = completeData,method='class')
rpart.plot(fit,extra=106)
library(caret)
confusionMatrix(data=fit,reference=as.factor(completeData$Approved))
prediction3 <- predict(fit,completeData,type-'class')
prediction3 <- predict(fit,completeData,type='class')
table_acc <- table(completeData$Approved,prediction3)
table_acc
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtNorm + YearsEmployedNorm + CreditScoreNorm + IncomeNorm,
family = "binomial", data = completeData)
summary(logreg)
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
confusionMatrix(data = as.factor(prediction<0.5),reference = as.factor(completeData$Approved))
logreg <- glm(formula = completeData$Approved ~ AgeNorm + DebtNorm +
YearsEmployedNorm + CreditScoreNorm + IncomeNorm,
family = "binomial", data = completeData)
summary(logreg)
library(caret)
prediction <- predict(logreg,completeData,type="response")
summary(prediction)
confusionMatrix(data = as.factor(prediction<0.5),reference = as.factor(completeData$Approved))
ggplot(completeData,aes(x=completeData$Ethnicity,fill=completeData$Approved))+geom_bar()
male = table(completeData$Gender)
maleAppTbl = table(completeData$Gender, completeData$Approved)
maleAppTbl = cbind(male, maleAppTbl)
maleApp = data.frame(maleAppTbl)
maleApp = maleApp %>%
select(male, "TRUE.")
colnames(maleApp) = c("MaleFreq", "True")
chisq.test(maleApp)
ggplot(completeData,aes(x=completeData$Ethnicity,fill=completeData$Approved))+geom_bar()
eth = table(completeData$Ethnicity)
ethAppTbl = table(completeData$Ethnicity,completeData$Approved)
ethAppTbl = cbind(eth,ethAppTbl)
ethApp = data.frame(ethAppTbl) %>%
select(eth, "TRUE.")
colnames(ethApp) = c("EthFreq","True")
chisq.test(ethApp)
eth = table(completeData$Ethnicity)
ethAppTbl = table(completeData$Ethnicity,completeData$Approved)
ethAppTbl = cbind(eth,ethAppTbl)
ethApp = data.frame(ethAppTbl) %>%
select(eth, "TRUE")
colnames(ethApp) = c("EthFreq","True")
chisq.test(ethApp)
male = table(completeData$Gender)
maleAppTbl = table(completeData$Gender, completeData$Approved)
maleAppTbl = cbind(male, maleAppTbl)
maleApp = data.frame(maleAppTbl)
maleApp = maleApp %>%
select(male, "TRUE.")
colnames(maleApp) = c("MaleFreq", "True")
chisq.test(maleApp)
male = table(completeData$Gender)
maleAppTbl = table(completeData$Gender, completeData$Approved)
maleAppTbl = cbind(male, maleAppTbl)
maleApp = data.frame(maleAppTbl)
maleApp = maleApp %>%
select(male, "TRUE")
colnames(maleApp) = c("MaleFreq", "True")
chisq.test(maleApp)
male = table(completeData$Gender)
maleAppTbl = table(completeData$Gender, completeData$Approved)
maleAppTbl = cbind(male, maleAppTbl)
maleApp = data.frame(maleAppTbl)
maleApp = maleApp
colnames(maleApp) = c("MaleFreq", "True")
chisq.test(maleApp)
setwd("C:/Users/jav_0/Desktop")
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),skip=4,pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),skip=4,pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
setwd("D:/Undergrad/4. Senior Year/Fall Sem/CSCI 4600 Data Analytics")
setwd("D:/Undergrad/4. Senior Year/Fall Sem/CSCI 4600 Data Analytics/Data")
#faster xls reader but requires perl!
bronx1<-read.xls(rollingsales_bronx.xls,skip=4,pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1)
#faster xls reader but requires perl!
bronx1<-read.xls("rollingsales_bronx.xls",skip=4,pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1)
#faster xls reader but requires perl!
bronx1<-read.xls("rollingsales_bronx.xls",skip=4,pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),skip=4,pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="perl")
library(gdata)
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="<SOMEWHERE>/perl/bin/perl.exe")
#faster xls reader but requires perl!
bronx1<-read.xls(file.choose(),pattern="BOROUGH",stringsAsFactors=FALSE,sheet=1,perl="C:/perl/bin/perl.exe")
gdata::findperl("perl")
gdata:::findperl("perl")
nyt1<-read.csv("nyt1.csv")
nyt1<-nyt1[which(nyt1$Impressions>0 & nyt1$Clicks>0 & nyt1$Age>0),]
nnyt1<-dim(nyt1)[1]		# shrink it down!
sampling.rate=0.9
num.test.set.labels=nnyt1*(1.-sampling.rate)
training <-sample(1:nnyt1,sampling.rate*nnyt1, replace=FALSE)
train<-subset(nyt1[training,],select=c(Age,Impressions))
testing<-setdiff(1:nnyt1,training)
test<-subset(nyt1[testing,],select=c(Age,Impressions))
cg<-nyt1$Gender[training]
true.labels<-nyt1$Gender[testing]
classif<-knn(train,test,cg,k=5) #
classif
attributes(.Last.value)
?attributes
attributes(classif)
classif<-knn(train,test,cg,k=5) #
nyt1<-read.csv("nyt1.csv")
nyt1<-nyt1[which(nyt1$Impressions>0 & nyt1$Clicks>0 & nyt1$Age>0),]
nnyt1<-dim(nyt1)[1]		# shrink it down!
sampling.rate=0.9
num.test.set.labels=nnyt1*(1.-sampling.rate)
training <-sample(1:nnyt1,sampling.rate*nnyt1, replace=FALSE)
train<-subset(nyt1[training,],select=c(Age,Impressions))
testing<-setdiff(1:nnyt1,training)
test<-subset(nyt1[testing,],select=c(Age,Impressions))
cg<-nyt1$Gender[training]
true.labels<-nyt1$Gender[testing]
classif<-knn(train,test,cg,k=5) #
library(class)
classif<-knn(train,test,cg,k=5) #
classif
attributes(.Last.value)
data(HairEyeColor)
mosaicplot(HairEyeColor)
margin.table(HairEyeColor,3)
margin.table(HairEyeColor,c(1,3))
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(iris[-5], log = "xy") # plot all variables on log scale
pairs(iris[-5], log = "x") # plot all variables on log scale
pairs(iris[-5], log = "y") # plot all variables on log scale
pairs(iris[-5], log = "xy") # plot all variables on log scale
pairs(iris, log = 1:4, # log the first four
main = "Lengths and Widths in [log]", line.main=1.5, oma=c(2,2,3,2))
## formula method
pairs(~ Fertility + Education + Catholic, data = swiss,
subset = Education < 20, main = "Swiss data, Education < 20")
pairs(USJudgeRatings)
## show only lower triangle (and suppress labeling for whatever reason):
pairs(USJudgeRatings, text.panel = NULL, upper.panel = NULL)
## put histograms on the diagonal
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(USJudgeRatings[1:5], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue",
diag.panel = panel.hist, cex.labels = 2, font.labels = 2)
## put (absolute) correlations on the upper panels,
## with size proportional to the correlations.
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(USJudgeRatings, lower.panel = panel.smooth, upper.panel = panel.cor)
require(lattice)
super.sym <- trellis.par.get("superpose.symbol")
splom(~iris[1:4], groups = Species, data = iris,
panel = panel.superpose,
key = list(title = "Three Varieties of Iris",
columns = 3,
points = list(pch = super.sym$pch[1:3],
col = super.sym$col[1:3]),
text = list(c("Setosa", "Versicolor", "Virginica"))))
splom(~iris[1:3]|Species, data = iris,
layout=c(2,2), pscales = 0,
varnames = c("Sepal\nLength", "Sepal\nWidth", "Petal\nLength"),
page = function(...) {
ltext(x = seq(.6, .8, length.out = 4),
y = seq(.9, .6, length.out = 4),
labels = c("Three", "Varieties", "of", "Iris"),
cex = 2)
})
parallelplot(~iris[1:4] | Species, iris)
parallelplot(~iris[1:4], iris, groups = Species,
horizontal.axis = FALSE, scales = list(x = list(rot = 90)))
super.sym <- trellis.par.get("superpose.symbol")
splom(~iris[1:4], groups = Species, data = iris,
panel = panel.superpose,
key = list(title = "Three Varieties of Iris",
columns = 3,
points = list(pch = super.sym$pch[1:3],
col = super.sym$col[1:3]),
text = list(c("Setosa", "Versicolor", "Virginica"))))
splom(~iris[1:3]|Species, data = iris,
layout=c(2,2), pscales = 0,
varnames = c("Sepal\nLength", "Sepal\nWidth", "Petal\nLength"),
page = function(...) {
ltext(x = seq(.6, .8, length.out = 4),
y = seq(.9, .6, length.out = 4),
labels = c("Three", "Varieties", "of", "Iris"),
cex = 2)
})
parallelplot(~iris[1:4] | Species, iris)
parallelplot(~iris[1:4], iris, groups = Species,
horizontal.axis = FALSE, scales = list(x = list(rot = 90)))
?splom
?parralelplot
?parallelplot
install.packages("car")
require(car)
require(kknn)
require(kknn)
data(ionosphere)
ionosphere.learn <- ionosphere[1:200,]
ionosphere.valid <- ionosphere[-c(1:200),]
fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)
table(ionosphere.valid$class, fit.kknn$fit)
(fit.train1 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1))
table(predict(fit.train1, ionosphere.valid), ionosphere.valid$class)
(fit.train2 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2))
table(predict(fit.train2, ionosphere.valid), ionosphere.valid$class)
data(iris)
m <- dim(iris)[1]
val <- sample(1:m, size = round(m/3), replace = FALSE,
prob = rep(1/m, m))
iris.learn <- iris[-val,]
iris.valid <- iris[val,]
iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,
kernel = "triangular")
summary(iris.kknn)
data(Titanic)
summary(Titanic)
Titanic
summary(Titanic)
data(Titanic)
Titanic <- data(Titanic)
data(Titanic)
Titanic
data(Titanic)
df <- get(data(Titanic))
Titanic <- data("Titanic")
data("Titanic")
df <- data.frame(Titanic)
data("Titanic")
df <- data.frame(Titanic)
summary(df)
head(df)
require(rpart)
Swiss_rpart <- rpart(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_rpart) # try some different plot options
swiss_rpart <- rpart(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_rpart) # try some different plot options
text(swiss_rpart) # try some different text options
require(rpart)
swiss_rpart <- rpart(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_rpart) # try some different plot options
text(swiss_rpart) # try some different text options
# Regression Tree Example
require(rpart)
# build the  tree
fitM <- rpart(Mileage~Price + Country + Reliability + Type, method="anova", data=cu.summary)
# Regression Tree Example
require(rpart)
# build the  tree
fitM <- rpart(Mileage~Price + Country + Reliability + Type, method="anova", data=cu.summary)
printcp(fitM) # display the results
?printcp
?rpart
library(e1071)
library(rpart)
data(Glass, package="mlbench")
install.package("mlbench")
install.packages("mlbench")
data(Glass, package="mlbench")
index <- 1:nrow(Glass)
testindex <- sample(index, trunc(length(index)/3))
testset <- Glass[testindex,]
trainset <- Glass[-testindex,]
rpart.model <- rpart(Type ~ ., data = trainset)
rpart.pred <- predict(rpart.model, testset[,-10], type = "class")
printcp(rpart.model)
plotcp(rpart.model)
?rpart
plotcp(rpart.model)
rsq.rpart(rpart.model)
?rsq.rpart
print(rpart.model)
plot(rpart.model,compress=TRUE)
text(rpart.model, use.n=TRUE)
plot(rpart.pred)
fitK <- rpart(Kyphosis ~ Age + Number + Start, method="class", data=kyphosis)
printcp(fitK) # display the results
plotcp(fitK) # visualize cross-validation results
?printcp
?plotcp
summary(fitK) # detailed summary of splits
library(rpart)
?rpart
?cpart
?ctree
rpart(Survived ~., data=df)
library(rpart)
data("Titanic")
df <- data.frame(Titanic)
rpart(Survived ~., data=df)
rpart <- rpart(Survived ~., data=df)
summary(rpart)
plotcp(rpart)
text(rpart)
plotcp(rpart)
plot(rpart, compress=T)
text(rpart, use.n=T)
getwd
getwd()
